type Scenario {
  id: ID!
  name: String!
  description: String
  sessions(filter: ModelSessionFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelSessionConnection
}

type Session {
  id: ID!
  name: String!
  description: String
  contact: String
  numberOfParticipants: Int
  RGPDay: AWSDate!
  startDate: AWSDate!
  endDate: AWSDate!
  scenario: Scenario!
}

type Config {
  id: ID!
  name: String!
  value: String!
}

type Query {
  sendMail(sender: String, content: String, subject: String, recaptcha: String): AWSJSON
  getScenario(id: ID!): Scenario
  listScenarios(filter: ModelScenarioFilterInput, limit: Int, nextToken: String): ModelScenarioConnection
  getSession(id: ID!): Session
  listSessions(filter: ModelSessionFilterInput, limit: Int, nextToken: String): ModelSessionConnection
  getConfig(id: ID!): Config
  listConfigs(filter: ModelConfigFilterInput, limit: Int, nextToken: String): ModelConfigConnection
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelScenarioConnection {
  items: [Scenario]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelScenarioFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  description: ModelStringFilterInput
  and: [ModelScenarioFilterInput]
  or: [ModelScenarioFilterInput]
  not: ModelScenarioFilterInput
}

input CreateScenarioInput {
  id: ID
  name: String!
  description: String
}

input UpdateScenarioInput {
  id: ID!
  name: String
  description: String
}

input DeleteScenarioInput {
  id: ID
}

type Mutation {
  createScenario(input: CreateScenarioInput!): Scenario
  updateScenario(input: UpdateScenarioInput!): Scenario
  deleteScenario(input: DeleteScenarioInput!): Scenario
  createSession(input: CreateSessionInput!): Session
  updateSession(input: UpdateSessionInput!): Session
  deleteSession(input: DeleteSessionInput!): Session
  createConfig(input: CreateConfigInput!): Config
  updateConfig(input: UpdateConfigInput!): Config
  deleteConfig(input: DeleteConfigInput!): Config
}

type Subscription {
  onCreateScenario: Scenario @aws_subscribe(mutations: ["createScenario"])
  onUpdateScenario: Scenario @aws_subscribe(mutations: ["updateScenario"])
  onDeleteScenario: Scenario @aws_subscribe(mutations: ["deleteScenario"])
  onCreateSession: Session @aws_subscribe(mutations: ["createSession"])
  onUpdateSession: Session @aws_subscribe(mutations: ["updateSession"])
  onDeleteSession: Session @aws_subscribe(mutations: ["deleteSession"])
  onCreateConfig: Config @aws_subscribe(mutations: ["createConfig"])
  onUpdateConfig: Config @aws_subscribe(mutations: ["updateConfig"])
  onDeleteConfig: Config @aws_subscribe(mutations: ["deleteConfig"])
}

type ModelSessionConnection {
  items: [Session]
  nextToken: String
}

input ModelSessionFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  description: ModelStringFilterInput
  contact: ModelStringFilterInput
  numberOfParticipants: ModelIntFilterInput
  RGPDay: ModelStringFilterInput
  startDate: ModelStringFilterInput
  endDate: ModelStringFilterInput
  and: [ModelSessionFilterInput]
  or: [ModelSessionFilterInput]
  not: ModelSessionFilterInput
}

input CreateSessionInput {
  id: ID
  name: String!
  description: String
  contact: String
  numberOfParticipants: Int
  RGPDay: AWSDate!
  startDate: AWSDate!
  endDate: AWSDate!
  sessionScenarioId: ID!
}

input UpdateSessionInput {
  id: ID!
  name: String
  description: String
  contact: String
  numberOfParticipants: Int
  RGPDay: AWSDate
  startDate: AWSDate
  endDate: AWSDate
  sessionScenarioId: ID
}

input DeleteSessionInput {
  id: ID
}

type ModelConfigConnection {
  items: [Config]
  nextToken: String
}

input ModelConfigFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  value: ModelStringFilterInput
  and: [ModelConfigFilterInput]
  or: [ModelConfigFilterInput]
  not: ModelConfigFilterInput
}

input CreateConfigInput {
  id: ID
  name: String!
  value: String!
}

input UpdateConfigInput {
  id: ID!
  name: String
  value: String
}

input DeleteConfigInput {
  id: ID
}
