type Scenario {
  id: ID!
  description: String
  searchable: String
  sessions(filter: ModelSessionFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelSessionConnection
}

type Presentation {
  id: ID!
  description: String
  searchable: String
  sessions(filter: ModelSessionFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelSessionConnection
}

type Session {
  id: ID!
  description: String
  contact: String
  numberOfParticipants: Int
  startDate: AWSDate
  endDate: AWSDate
  gameOver: Boolean
  searchable: String
  scenario: Scenario!
  presentation: Presentation!
  teams(filter: ModelTeamFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelTeamConnection
}

type Team {
  id: ID!
  name: String!
  initials: String
  searchable: String
  numberOfInterviews: Int
  serviceBeingInterviewed: String
  session: Session!
  quizzes(filter: ModelQuizFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelQuizConnection
}

type Quiz {
  id: ID!
  service: String!
  answers: AWSJSON!
  numberOfJokers: Int!
  team: Team!
}

type Config {
  id: ID!
  value: AWSJSON
}

type Query {
  sendMail(sender: String, content: String, subject: String, recaptcha: String): AWSJSON
  getScenario(id: ID!): Scenario
  listScenarios(filter: ModelScenarioFilterInput, limit: Int, nextToken: String): ModelScenarioConnection
  getPresentation(id: ID!): Presentation
  listPresentations(filter: ModelPresentationFilterInput, limit: Int, nextToken: String): ModelPresentationConnection
  getSession(id: ID!): Session
  listSessions(filter: ModelSessionFilterInput, limit: Int, nextToken: String): ModelSessionConnection
  getTeam(id: ID!): Team
  listTeams(filter: ModelTeamFilterInput, limit: Int, nextToken: String): ModelTeamConnection
  getQuiz(id: ID!): Quiz
  listQuizs(filter: ModelQuizFilterInput, limit: Int, nextToken: String): ModelQuizConnection
  getConfig(id: ID!): Config
  listConfigs(filter: ModelConfigFilterInput, limit: Int, nextToken: String): ModelConfigConnection
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelScenarioConnection {
  items: [Scenario]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelScenarioFilterInput {
  id: ModelIDFilterInput
  description: ModelStringFilterInput
  searchable: ModelStringFilterInput
  and: [ModelScenarioFilterInput]
  or: [ModelScenarioFilterInput]
  not: ModelScenarioFilterInput
}

input CreateScenarioInput {
  id: ID
  description: String
  searchable: String
}

input UpdateScenarioInput {
  id: ID!
  description: String
  searchable: String
}

input DeleteScenarioInput {
  id: ID
}

type Mutation {
  createScenario(input: CreateScenarioInput!): Scenario
  updateScenario(input: UpdateScenarioInput!): Scenario
  deleteScenario(input: DeleteScenarioInput!): Scenario
  createPresentation(input: CreatePresentationInput!): Presentation
  updatePresentation(input: UpdatePresentationInput!): Presentation
  deletePresentation(input: DeletePresentationInput!): Presentation
  createSession(input: CreateSessionInput!): Session
  updateSession(input: UpdateSessionInput!): Session
  deleteSession(input: DeleteSessionInput!): Session
  createTeam(input: CreateTeamInput!): Team
  updateTeam(input: UpdateTeamInput!): Team
  deleteTeam(input: DeleteTeamInput!): Team
  createQuiz(input: CreateQuizInput!): Quiz
  updateQuiz(input: UpdateQuizInput!): Quiz
  deleteQuiz(input: DeleteQuizInput!): Quiz
  createConfig(input: CreateConfigInput!): Config
  updateConfig(input: UpdateConfigInput!): Config
  deleteConfig(input: DeleteConfigInput!): Config
}

type Subscription {
  onCreateScenario: Scenario @aws_subscribe(mutations: ["createScenario"])
  onUpdateScenario: Scenario @aws_subscribe(mutations: ["updateScenario"])
  onDeleteScenario: Scenario @aws_subscribe(mutations: ["deleteScenario"])
  onCreatePresentation: Presentation @aws_subscribe(mutations: ["createPresentation"])
  onUpdatePresentation: Presentation @aws_subscribe(mutations: ["updatePresentation"])
  onDeletePresentation: Presentation @aws_subscribe(mutations: ["deletePresentation"])
  onCreateSession: Session @aws_subscribe(mutations: ["createSession"])
  onUpdateSession: Session @aws_subscribe(mutations: ["updateSession"])
  onDeleteSession: Session @aws_subscribe(mutations: ["deleteSession"])
  onCreateTeam: Team @aws_subscribe(mutations: ["createTeam"])
  onUpdateTeam: Team @aws_subscribe(mutations: ["updateTeam"])
  onDeleteTeam: Team @aws_subscribe(mutations: ["deleteTeam"])
  onCreateQuiz: Quiz @aws_subscribe(mutations: ["createQuiz"])
  onUpdateQuiz: Quiz @aws_subscribe(mutations: ["updateQuiz"])
  onDeleteQuiz: Quiz @aws_subscribe(mutations: ["deleteQuiz"])
  onCreateConfig: Config @aws_subscribe(mutations: ["createConfig"])
  onUpdateConfig: Config @aws_subscribe(mutations: ["updateConfig"])
  onDeleteConfig: Config @aws_subscribe(mutations: ["deleteConfig"])
}

type ModelPresentationConnection {
  items: [Presentation]
  nextToken: String
}

input ModelPresentationFilterInput {
  id: ModelIDFilterInput
  description: ModelStringFilterInput
  searchable: ModelStringFilterInput
  and: [ModelPresentationFilterInput]
  or: [ModelPresentationFilterInput]
  not: ModelPresentationFilterInput
}

input CreatePresentationInput {
  id: ID
  description: String
  searchable: String
}

input UpdatePresentationInput {
  id: ID!
  description: String
  searchable: String
}

input DeletePresentationInput {
  id: ID
}

type ModelSessionConnection {
  items: [Session]
  nextToken: String
}

input ModelSessionFilterInput {
  id: ModelIDFilterInput
  description: ModelStringFilterInput
  contact: ModelStringFilterInput
  numberOfParticipants: ModelIntFilterInput
  startDate: ModelStringFilterInput
  endDate: ModelStringFilterInput
  gameOver: ModelBooleanFilterInput
  searchable: ModelStringFilterInput
  and: [ModelSessionFilterInput]
  or: [ModelSessionFilterInput]
  not: ModelSessionFilterInput
}

input CreateSessionInput {
  id: ID
  description: String
  contact: String
  numberOfParticipants: Int
  startDate: AWSDate
  endDate: AWSDate
  gameOver: Boolean
  searchable: String
  sessionScenarioId: ID!
  sessionPresentationId: ID!
}

input UpdateSessionInput {
  id: ID!
  description: String
  contact: String
  numberOfParticipants: Int
  startDate: AWSDate
  endDate: AWSDate
  gameOver: Boolean
  searchable: String
  sessionScenarioId: ID
  sessionPresentationId: ID
}

input DeleteSessionInput {
  id: ID
}

type ModelTeamConnection {
  items: [Team]
  nextToken: String
}

input ModelTeamFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  initials: ModelStringFilterInput
  searchable: ModelStringFilterInput
  numberOfInterviews: ModelIntFilterInput
  serviceBeingInterviewed: ModelStringFilterInput
  and: [ModelTeamFilterInput]
  or: [ModelTeamFilterInput]
  not: ModelTeamFilterInput
}

input CreateTeamInput {
  id: ID
  name: String!
  initials: String
  searchable: String
  numberOfInterviews: Int
  serviceBeingInterviewed: String
  teamSessionId: ID!
}

input UpdateTeamInput {
  id: ID!
  name: String
  initials: String
  searchable: String
  numberOfInterviews: Int
  serviceBeingInterviewed: String
  teamSessionId: ID
}

input DeleteTeamInput {
  id: ID
}

type ModelQuizConnection {
  items: [Quiz]
  nextToken: String
}

input ModelQuizFilterInput {
  id: ModelIDFilterInput
  service: ModelStringFilterInput
  answers: ModelStringFilterInput
  numberOfJokers: ModelIntFilterInput
  and: [ModelQuizFilterInput]
  or: [ModelQuizFilterInput]
  not: ModelQuizFilterInput
}

input CreateQuizInput {
  id: ID
  service: String!
  answers: AWSJSON!
  numberOfJokers: Int!
  quizTeamId: ID!
}

input UpdateQuizInput {
  id: ID!
  service: String
  answers: AWSJSON
  numberOfJokers: Int
  quizTeamId: ID
}

input DeleteQuizInput {
  id: ID
}

type ModelConfigConnection {
  items: [Config]
  nextToken: String
}

input ModelConfigFilterInput {
  id: ModelIDFilterInput
  value: ModelStringFilterInput
  and: [ModelConfigFilterInput]
  or: [ModelConfigFilterInput]
  not: ModelConfigFilterInput
}

input CreateConfigInput {
  id: ID
  value: AWSJSON
}

input UpdateConfigInput {
  id: ID!
  value: AWSJSON
}

input DeleteConfigInput {
  id: ID
}
